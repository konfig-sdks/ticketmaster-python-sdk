# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class Attraction(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Attraction
    """


    class MetaOapg:
        required = {
            "id",
            "type",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "event": "EVENT",
                        "venue": "VENUE",
                        "attraction": "ATTRACTION",
                    }
                
                @schemas.classproperty
                def EVENT(cls):
                    return cls("event")
                
                @schemas.classproperty
                def VENUE(cls):
                    return cls("venue")
                
                @schemas.classproperty
                def ATTRACTION(cls):
                    return cls("attraction")
            description = schemas.StrSchema
            additionalInfo = schemas.StrSchema
            
            
            class classifications(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Classification']:
                        return Classification
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Classification'], typing.List['Classification']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'classifications':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Classification':
                    return super().__getitem__(i)
        
            @staticmethod
            def externalLinks() -> typing.Type['AttractionExternalLinks']:
                return AttractionExternalLinks
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    
                    @staticmethod
                    def items() -> typing.Type['Image']:
                        return Image
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Image'], typing.List['Image']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Image':
                    return super().__getitem__(i)
            locale = schemas.StrSchema
            name = schemas.StrSchema
            test = schemas.BoolSchema
        
            @staticmethod
            def upcomingEvents() -> typing.Type['AttractionUpcomingEvents']:
                return AttractionUpcomingEvents
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "type": type,
                "description": description,
                "additionalInfo": additionalInfo,
                "classifications": classifications,
                "externalLinks": externalLinks,
                "images": images,
                "locale": locale,
                "name": name,
                "test": test,
                "upcomingEvents": upcomingEvents,
                "url": url,
            }
    
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalInfo"]) -> MetaOapg.properties.additionalInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classifications"]) -> MetaOapg.properties.classifications: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalLinks"]) -> 'AttractionExternalLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test"]) -> MetaOapg.properties.test: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upcomingEvents"]) -> 'AttractionUpcomingEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "description", "additionalInfo", "classifications", "externalLinks", "images", "locale", "name", "test", "upcomingEvents", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalInfo"]) -> typing.Union[MetaOapg.properties.additionalInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classifications"]) -> typing.Union[MetaOapg.properties.classifications, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalLinks"]) -> typing.Union['AttractionExternalLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test"]) -> typing.Union[MetaOapg.properties.test, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upcomingEvents"]) -> typing.Union['AttractionUpcomingEvents', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "description", "additionalInfo", "classifications", "externalLinks", "images", "locale", "name", "test", "upcomingEvents", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        additionalInfo: typing.Union[MetaOapg.properties.additionalInfo, str, schemas.Unset] = schemas.unset,
        classifications: typing.Union[MetaOapg.properties.classifications, list, tuple, schemas.Unset] = schemas.unset,
        externalLinks: typing.Union['AttractionExternalLinks', schemas.Unset] = schemas.unset,
        images: typing.Union[MetaOapg.properties.images, list, tuple, schemas.Unset] = schemas.unset,
        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        test: typing.Union[MetaOapg.properties.test, bool, schemas.Unset] = schemas.unset,
        upcomingEvents: typing.Union['AttractionUpcomingEvents', schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Attraction':
        return super().__new__(
            cls,
            *args,
            id=id,
            type=type,
            description=description,
            additionalInfo=additionalInfo,
            classifications=classifications,
            externalLinks=externalLinks,
            images=images,
            locale=locale,
            name=name,
            test=test,
            upcomingEvents=upcomingEvents,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from ticketmaster_python_sdk.model.attraction_external_links import AttractionExternalLinks
from ticketmaster_python_sdk.model.attraction_upcoming_events import AttractionUpcomingEvents
from ticketmaster_python_sdk.model.classification import Classification
from ticketmaster_python_sdk.model.image import Image
