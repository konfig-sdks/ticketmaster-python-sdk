# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class LocalTime(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def chronology() -> typing.Type['Chronology']:
                return Chronology
            
            
            class fieldTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DateTimeFieldType']:
                        return DateTimeFieldType
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DateTimeFieldType'], typing.List['DateTimeFieldType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fieldTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DateTimeFieldType':
                    return super().__getitem__(i)
            
            
            class fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DateTimeField']:
                        return DateTimeField
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DateTimeField'], typing.List['DateTimeField']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DateTimeField':
                    return super().__getitem__(i)
            hourOfDay = schemas.Int32Schema
            millisOfDay = schemas.Int32Schema
            millisOfSecond = schemas.Int32Schema
            minuteOfHour = schemas.Int32Schema
            secondOfMinute = schemas.Int32Schema
        
            @staticmethod
            def values() -> typing.Type['LocalTimeValues']:
                return LocalTimeValues
            __annotations__ = {
                "chronology": chronology,
                "fieldTypes": fieldTypes,
                "fields": fields,
                "hourOfDay": hourOfDay,
                "millisOfDay": millisOfDay,
                "millisOfSecond": millisOfSecond,
                "minuteOfHour": minuteOfHour,
                "secondOfMinute": secondOfMinute,
                "values": values,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chronology"]) -> 'Chronology': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldTypes"]) -> MetaOapg.properties.fieldTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hourOfDay"]) -> MetaOapg.properties.hourOfDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["millisOfDay"]) -> MetaOapg.properties.millisOfDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["millisOfSecond"]) -> MetaOapg.properties.millisOfSecond: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minuteOfHour"]) -> MetaOapg.properties.minuteOfHour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondOfMinute"]) -> MetaOapg.properties.secondOfMinute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["values"]) -> 'LocalTimeValues': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["chronology", "fieldTypes", "fields", "hourOfDay", "millisOfDay", "millisOfSecond", "minuteOfHour", "secondOfMinute", "values", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chronology"]) -> typing.Union['Chronology', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldTypes"]) -> typing.Union[MetaOapg.properties.fieldTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hourOfDay"]) -> typing.Union[MetaOapg.properties.hourOfDay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["millisOfDay"]) -> typing.Union[MetaOapg.properties.millisOfDay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["millisOfSecond"]) -> typing.Union[MetaOapg.properties.millisOfSecond, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minuteOfHour"]) -> typing.Union[MetaOapg.properties.minuteOfHour, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondOfMinute"]) -> typing.Union[MetaOapg.properties.secondOfMinute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["values"]) -> typing.Union['LocalTimeValues', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["chronology", "fieldTypes", "fields", "hourOfDay", "millisOfDay", "millisOfSecond", "minuteOfHour", "secondOfMinute", "values", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        chronology: typing.Union['Chronology', schemas.Unset] = schemas.unset,
        fieldTypes: typing.Union[MetaOapg.properties.fieldTypes, list, tuple, schemas.Unset] = schemas.unset,
        fields: typing.Union[MetaOapg.properties.fields, list, tuple, schemas.Unset] = schemas.unset,
        hourOfDay: typing.Union[MetaOapg.properties.hourOfDay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        millisOfDay: typing.Union[MetaOapg.properties.millisOfDay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        millisOfSecond: typing.Union[MetaOapg.properties.millisOfSecond, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minuteOfHour: typing.Union[MetaOapg.properties.minuteOfHour, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        secondOfMinute: typing.Union[MetaOapg.properties.secondOfMinute, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        values: typing.Union['LocalTimeValues', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocalTime':
        return super().__new__(
            cls,
            *args,
            chronology=chronology,
            fieldTypes=fieldTypes,
            fields=fields,
            hourOfDay=hourOfDay,
            millisOfDay=millisOfDay,
            millisOfSecond=millisOfSecond,
            minuteOfHour=minuteOfHour,
            secondOfMinute=secondOfMinute,
            values=values,
            _configuration=_configuration,
            **kwargs,
        )

from ticketmaster_python_sdk.model.chronology import Chronology
from ticketmaster_python_sdk.model.date_time_field import DateTimeField
from ticketmaster_python_sdk.model.date_time_field_type import DateTimeFieldType
from ticketmaster_python_sdk.model.local_time_values import LocalTimeValues
