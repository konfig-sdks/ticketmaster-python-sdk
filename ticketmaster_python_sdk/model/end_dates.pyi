# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class EndDates(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Event's End Dates
    """


    class MetaOapg:
        
        class properties:
            approximate = schemas.BoolSchema
            dateTime = schemas.DateTimeSchema
            localDate = schemas.DateSchema
        
            @staticmethod
            def localTime() -> typing.Type['LocalTime']:
                return LocalTime
            noSpecificTime = schemas.BoolSchema
            __annotations__ = {
                "approximate": approximate,
                "dateTime": dateTime,
                "localDate": localDate,
                "localTime": localTime,
                "noSpecificTime": noSpecificTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approximate"]) -> MetaOapg.properties.approximate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateTime"]) -> MetaOapg.properties.dateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localDate"]) -> MetaOapg.properties.localDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localTime"]) -> 'LocalTime': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noSpecificTime"]) -> MetaOapg.properties.noSpecificTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["approximate", "dateTime", "localDate", "localTime", "noSpecificTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approximate"]) -> typing.Union[MetaOapg.properties.approximate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateTime"]) -> typing.Union[MetaOapg.properties.dateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localDate"]) -> typing.Union[MetaOapg.properties.localDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localTime"]) -> typing.Union['LocalTime', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noSpecificTime"]) -> typing.Union[MetaOapg.properties.noSpecificTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["approximate", "dateTime", "localDate", "localTime", "noSpecificTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        approximate: typing.Union[MetaOapg.properties.approximate, bool, schemas.Unset] = schemas.unset,
        dateTime: typing.Union[MetaOapg.properties.dateTime, str, datetime, schemas.Unset] = schemas.unset,
        localDate: typing.Union[MetaOapg.properties.localDate, str, date, schemas.Unset] = schemas.unset,
        localTime: typing.Union['LocalTime', schemas.Unset] = schemas.unset,
        noSpecificTime: typing.Union[MetaOapg.properties.noSpecificTime, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EndDates':
        return super().__new__(
            cls,
            *args,
            approximate=approximate,
            dateTime=dateTime,
            localDate=localDate,
            localTime=localTime,
            noSpecificTime=noSpecificTime,
            _configuration=_configuration,
            **kwargs,
        )

from ticketmaster_python_sdk.model.local_time import LocalTime
