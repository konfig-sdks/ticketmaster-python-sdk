# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class Venue(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Venue
    """


    class MetaOapg:
        required = {
            "id",
            "type",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EVENT(cls):
                    return cls("event")
                
                @schemas.classproperty
                def VENUE(cls):
                    return cls("venue")
                
                @schemas.classproperty
                def ATTRACTION(cls):
                    return cls("attraction")
            description = schemas.StrSchema
            accessibleSeatingDetail = schemas.StrSchema
            additionalInfo = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['Address']:
                return Address
        
            @staticmethod
            def boxOfficeInfo() -> typing.Type['VenueBoxOfficeInfo']:
                return VenueBoxOfficeInfo
        
            @staticmethod
            def city() -> typing.Type['City']:
                return City
        
            @staticmethod
            def country() -> typing.Type['Country']:
                return Country
            currency = schemas.StrSchema
            distance = schemas.Float64Schema
            
            
            class dma(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Dma']:
                        return Dma
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Dma'], typing.List['Dma']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dma':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Dma':
                    return super().__getitem__(i)
        
            @staticmethod
            def externalLinks() -> typing.Type['VenueExternalLinks']:
                return VenueExternalLinks
        
            @staticmethod
            def generalInfo() -> typing.Type['VenueGeneralInfo']:
                return VenueGeneralInfo
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Image']:
                        return Image
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Image'], typing.List['Image']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Image':
                    return super().__getitem__(i)
            locale = schemas.StrSchema
        
            @staticmethod
            def location() -> typing.Type['Location']:
                return Location
            
            
            class markets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Market']:
                        return Market
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Market'], typing.List['Market']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'markets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Market':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            parkingDetail = schemas.StrSchema
            postalCode = schemas.StrSchema
        
            @staticmethod
            def social() -> typing.Type['Social']:
                return Social
        
            @staticmethod
            def state() -> typing.Type['State']:
                return State
            test = schemas.BoolSchema
            timezone = schemas.StrSchema
            units = schemas.StrSchema
        
            @staticmethod
            def upcomingEvents() -> typing.Type['VenueUpcomingEvents']:
                return VenueUpcomingEvents
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "type": type,
                "description": description,
                "accessibleSeatingDetail": accessibleSeatingDetail,
                "additionalInfo": additionalInfo,
                "address": address,
                "boxOfficeInfo": boxOfficeInfo,
                "city": city,
                "country": country,
                "currency": currency,
                "distance": distance,
                "dma": dma,
                "externalLinks": externalLinks,
                "generalInfo": generalInfo,
                "images": images,
                "locale": locale,
                "location": location,
                "markets": markets,
                "name": name,
                "parkingDetail": parkingDetail,
                "postalCode": postalCode,
                "social": social,
                "state": state,
                "test": test,
                "timezone": timezone,
                "units": units,
                "upcomingEvents": upcomingEvents,
                "url": url,
            }
    
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessibleSeatingDetail"]) -> MetaOapg.properties.accessibleSeatingDetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalInfo"]) -> MetaOapg.properties.additionalInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boxOfficeInfo"]) -> 'VenueBoxOfficeInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> 'City': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'Country': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dma"]) -> MetaOapg.properties.dma: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalLinks"]) -> 'VenueExternalLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generalInfo"]) -> 'VenueGeneralInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markets"]) -> MetaOapg.properties.markets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parkingDetail"]) -> MetaOapg.properties.parkingDetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["social"]) -> 'Social': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test"]) -> MetaOapg.properties.test: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upcomingEvents"]) -> 'VenueUpcomingEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "description", "accessibleSeatingDetail", "additionalInfo", "address", "boxOfficeInfo", "city", "country", "currency", "distance", "dma", "externalLinks", "generalInfo", "images", "locale", "location", "markets", "name", "parkingDetail", "postalCode", "social", "state", "test", "timezone", "units", "upcomingEvents", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessibleSeatingDetail"]) -> typing.Union[MetaOapg.properties.accessibleSeatingDetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalInfo"]) -> typing.Union[MetaOapg.properties.additionalInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boxOfficeInfo"]) -> typing.Union['VenueBoxOfficeInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union['City', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union['Country', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distance"]) -> typing.Union[MetaOapg.properties.distance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dma"]) -> typing.Union[MetaOapg.properties.dma, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalLinks"]) -> typing.Union['VenueExternalLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generalInfo"]) -> typing.Union['VenueGeneralInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markets"]) -> typing.Union[MetaOapg.properties.markets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parkingDetail"]) -> typing.Union[MetaOapg.properties.parkingDetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> typing.Union[MetaOapg.properties.postalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["social"]) -> typing.Union['Social', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union['State', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test"]) -> typing.Union[MetaOapg.properties.test, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upcomingEvents"]) -> typing.Union['VenueUpcomingEvents', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "description", "accessibleSeatingDetail", "additionalInfo", "address", "boxOfficeInfo", "city", "country", "currency", "distance", "dma", "externalLinks", "generalInfo", "images", "locale", "location", "markets", "name", "parkingDetail", "postalCode", "social", "state", "test", "timezone", "units", "upcomingEvents", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        accessibleSeatingDetail: typing.Union[MetaOapg.properties.accessibleSeatingDetail, str, schemas.Unset] = schemas.unset,
        additionalInfo: typing.Union[MetaOapg.properties.additionalInfo, str, schemas.Unset] = schemas.unset,
        address: typing.Union['Address', schemas.Unset] = schemas.unset,
        boxOfficeInfo: typing.Union['VenueBoxOfficeInfo', schemas.Unset] = schemas.unset,
        city: typing.Union['City', schemas.Unset] = schemas.unset,
        country: typing.Union['Country', schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        distance: typing.Union[MetaOapg.properties.distance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dma: typing.Union[MetaOapg.properties.dma, list, tuple, schemas.Unset] = schemas.unset,
        externalLinks: typing.Union['VenueExternalLinks', schemas.Unset] = schemas.unset,
        generalInfo: typing.Union['VenueGeneralInfo', schemas.Unset] = schemas.unset,
        images: typing.Union[MetaOapg.properties.images, list, tuple, schemas.Unset] = schemas.unset,
        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
        location: typing.Union['Location', schemas.Unset] = schemas.unset,
        markets: typing.Union[MetaOapg.properties.markets, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        parkingDetail: typing.Union[MetaOapg.properties.parkingDetail, str, schemas.Unset] = schemas.unset,
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, schemas.Unset] = schemas.unset,
        social: typing.Union['Social', schemas.Unset] = schemas.unset,
        state: typing.Union['State', schemas.Unset] = schemas.unset,
        test: typing.Union[MetaOapg.properties.test, bool, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        units: typing.Union[MetaOapg.properties.units, str, schemas.Unset] = schemas.unset,
        upcomingEvents: typing.Union['VenueUpcomingEvents', schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Venue':
        return super().__new__(
            cls,
            *args,
            id=id,
            type=type,
            description=description,
            accessibleSeatingDetail=accessibleSeatingDetail,
            additionalInfo=additionalInfo,
            address=address,
            boxOfficeInfo=boxOfficeInfo,
            city=city,
            country=country,
            currency=currency,
            distance=distance,
            dma=dma,
            externalLinks=externalLinks,
            generalInfo=generalInfo,
            images=images,
            locale=locale,
            location=location,
            markets=markets,
            name=name,
            parkingDetail=parkingDetail,
            postalCode=postalCode,
            social=social,
            state=state,
            test=test,
            timezone=timezone,
            units=units,
            upcomingEvents=upcomingEvents,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from ticketmaster_python_sdk.model.address import Address
from ticketmaster_python_sdk.model.city import City
from ticketmaster_python_sdk.model.country import Country
from ticketmaster_python_sdk.model.dma import Dma
from ticketmaster_python_sdk.model.image import Image
from ticketmaster_python_sdk.model.location import Location
from ticketmaster_python_sdk.model.market import Market
from ticketmaster_python_sdk.model.social import Social
from ticketmaster_python_sdk.model.state import State
from ticketmaster_python_sdk.model.venue_box_office_info import VenueBoxOfficeInfo
from ticketmaster_python_sdk.model.venue_external_links import VenueExternalLinks
from ticketmaster_python_sdk.model.venue_general_info import VenueGeneralInfo
from ticketmaster_python_sdk.model.venue_upcoming_events import VenueUpcomingEvents
