# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class EventDates(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Event's Dates
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def access() -> typing.Type['AccessDates']:
                return AccessDates
        
            @staticmethod
            def end() -> typing.Type['EndDates']:
                return EndDates
            spanMultipleDays = schemas.BoolSchema
        
            @staticmethod
            def start() -> typing.Type['StartDates']:
                return StartDates
        
            @staticmethod
            def status() -> typing.Type['EventStatus']:
                return EventStatus
            timezone = schemas.StrSchema
            __annotations__ = {
                "access": access,
                "end": end,
                "spanMultipleDays": spanMultipleDays,
                "start": start,
                "status": status,
                "timezone": timezone,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access"]) -> 'AccessDates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end"]) -> 'EndDates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spanMultipleDays"]) -> MetaOapg.properties.spanMultipleDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> 'StartDates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'EventStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access", "end", "spanMultipleDays", "start", "status", "timezone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access"]) -> typing.Union['AccessDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> typing.Union['EndDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spanMultipleDays"]) -> typing.Union[MetaOapg.properties.spanMultipleDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> typing.Union['StartDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['EventStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access", "end", "spanMultipleDays", "start", "status", "timezone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        access: typing.Union['AccessDates', schemas.Unset] = schemas.unset,
        end: typing.Union['EndDates', schemas.Unset] = schemas.unset,
        spanMultipleDays: typing.Union[MetaOapg.properties.spanMultipleDays, bool, schemas.Unset] = schemas.unset,
        start: typing.Union['StartDates', schemas.Unset] = schemas.unset,
        status: typing.Union['EventStatus', schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventDates':
        return super().__new__(
            cls,
            *args,
            access=access,
            end=end,
            spanMultipleDays=spanMultipleDays,
            start=start,
            status=status,
            timezone=timezone,
            _configuration=_configuration,
            **kwargs,
        )

from ticketmaster_python_sdk.model.access_dates import AccessDates
from ticketmaster_python_sdk.model.end_dates import EndDates
from ticketmaster_python_sdk.model.event_status import EventStatus
from ticketmaster_python_sdk.model.start_dates import StartDates
