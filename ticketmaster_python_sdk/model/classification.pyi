# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class Classification(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Classification
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def genre() -> typing.Type['Level']:
                return Level
            primary = schemas.BoolSchema
        
            @staticmethod
            def segment() -> typing.Type['Segment']:
                return Segment
        
            @staticmethod
            def subGenre() -> typing.Type['Level']:
                return Level
        
            @staticmethod
            def subType() -> typing.Type['Level']:
                return Level
        
            @staticmethod
            def type() -> typing.Type['Level']:
                return Level
            __annotations__ = {
                "genre": genre,
                "primary": primary,
                "segment": segment,
                "subGenre": subGenre,
                "subType": subType,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genre"]) -> 'Level': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary"]) -> MetaOapg.properties.primary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment"]) -> 'Segment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subGenre"]) -> 'Level': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subType"]) -> 'Level': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'Level': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["genre", "primary", "segment", "subGenre", "subType", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genre"]) -> typing.Union['Level', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary"]) -> typing.Union[MetaOapg.properties.primary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment"]) -> typing.Union['Segment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subGenre"]) -> typing.Union['Level', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subType"]) -> typing.Union['Level', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['Level', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["genre", "primary", "segment", "subGenre", "subType", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        genre: typing.Union['Level', schemas.Unset] = schemas.unset,
        primary: typing.Union[MetaOapg.properties.primary, bool, schemas.Unset] = schemas.unset,
        segment: typing.Union['Segment', schemas.Unset] = schemas.unset,
        subGenre: typing.Union['Level', schemas.Unset] = schemas.unset,
        subType: typing.Union['Level', schemas.Unset] = schemas.unset,
        type: typing.Union['Level', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Classification':
        return super().__new__(
            cls,
            *args,
            genre=genre,
            primary=primary,
            segment=segment,
            subGenre=subGenre,
            subType=subType,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from ticketmaster_python_sdk.model.level import Level
from ticketmaster_python_sdk.model.segment import Segment
