# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class Image(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Image
    """


    class MetaOapg:
        
        class properties:
            attribution = schemas.StrSchema
            fallback = schemas.BoolSchema
            height = schemas.Int32Schema
            
            
            class ratio(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "169": "POSITIVE_169",
                        "32": "POSITIVE_32",
                        "43": "POSITIVE_43",
                    }
                
                @schemas.classproperty
                def POSITIVE_169(cls):
                    return cls("169")
                
                @schemas.classproperty
                def POSITIVE_32(cls):
                    return cls("32")
                
                @schemas.classproperty
                def POSITIVE_43(cls):
                    return cls("43")
            url = schemas.StrSchema
            width = schemas.Int32Schema
            __annotations__ = {
                "attribution": attribution,
                "fallback": fallback,
                "height": height,
                "ratio": ratio,
                "url": url,
                "width": width,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribution"]) -> MetaOapg.properties.attribution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fallback"]) -> MetaOapg.properties.fallback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratio"]) -> MetaOapg.properties.ratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attribution", "fallback", "height", "ratio", "url", "width", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribution"]) -> typing.Union[MetaOapg.properties.attribution, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fallback"]) -> typing.Union[MetaOapg.properties.fallback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratio"]) -> typing.Union[MetaOapg.properties.ratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attribution", "fallback", "height", "ratio", "url", "width", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        attribution: typing.Union[MetaOapg.properties.attribution, str, schemas.Unset] = schemas.unset,
        fallback: typing.Union[MetaOapg.properties.fallback, bool, schemas.Unset] = schemas.unset,
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ratio: typing.Union[MetaOapg.properties.ratio, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Image':
        return super().__new__(
            cls,
            *args,
            attribution=attribution,
            fallback=fallback,
            height=height,
            ratio=ratio,
            url=url,
            width=width,
            _configuration=_configuration,
            **kwargs,
        )
