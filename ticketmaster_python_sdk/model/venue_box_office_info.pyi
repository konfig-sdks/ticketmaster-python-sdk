# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class VenueBoxOfficeInfo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Venue box office information
    """


    class MetaOapg:
        
        class properties:
            acceptedPaymentDetail = schemas.StrSchema
            openHoursDetail = schemas.StrSchema
            phoneNumberDetail = schemas.StrSchema
            willCallDetail = schemas.StrSchema
            __annotations__ = {
                "acceptedPaymentDetail": acceptedPaymentDetail,
                "openHoursDetail": openHoursDetail,
                "phoneNumberDetail": phoneNumberDetail,
                "willCallDetail": willCallDetail,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acceptedPaymentDetail"]) -> MetaOapg.properties.acceptedPaymentDetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openHoursDetail"]) -> MetaOapg.properties.openHoursDetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumberDetail"]) -> MetaOapg.properties.phoneNumberDetail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["willCallDetail"]) -> MetaOapg.properties.willCallDetail: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acceptedPaymentDetail", "openHoursDetail", "phoneNumberDetail", "willCallDetail", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acceptedPaymentDetail"]) -> typing.Union[MetaOapg.properties.acceptedPaymentDetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openHoursDetail"]) -> typing.Union[MetaOapg.properties.openHoursDetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumberDetail"]) -> typing.Union[MetaOapg.properties.phoneNumberDetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["willCallDetail"]) -> typing.Union[MetaOapg.properties.willCallDetail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acceptedPaymentDetail", "openHoursDetail", "phoneNumberDetail", "willCallDetail", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        acceptedPaymentDetail: typing.Union[MetaOapg.properties.acceptedPaymentDetail, str, schemas.Unset] = schemas.unset,
        openHoursDetail: typing.Union[MetaOapg.properties.openHoursDetail, str, schemas.Unset] = schemas.unset,
        phoneNumberDetail: typing.Union[MetaOapg.properties.phoneNumberDetail, str, schemas.Unset] = schemas.unset,
        willCallDetail: typing.Union[MetaOapg.properties.willCallDetail, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VenueBoxOfficeInfo':
        return super().__new__(
            cls,
            *args,
            acceptedPaymentDetail=acceptedPaymentDetail,
            openHoursDetail=openHoursDetail,
            phoneNumberDetail=phoneNumberDetail,
            willCallDetail=willCallDetail,
            _configuration=_configuration,
            **kwargs,
        )
