# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class DateTimeField(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def durationField() -> typing.Type['DurationField']:
                return DurationField
        
            @staticmethod
            def leapDurationField() -> typing.Type['DurationField']:
                return DurationField
            lenient = schemas.BoolSchema
            maximumValue = schemas.Int32Schema
            minimumValue = schemas.Int32Schema
            name = schemas.StrSchema
        
            @staticmethod
            def rangeDurationField() -> typing.Type['DurationField']:
                return DurationField
            supported = schemas.BoolSchema
        
            @staticmethod
            def type() -> typing.Type['DateTimeFieldType']:
                return DateTimeFieldType
            __annotations__ = {
                "durationField": durationField,
                "leapDurationField": leapDurationField,
                "lenient": lenient,
                "maximumValue": maximumValue,
                "minimumValue": minimumValue,
                "name": name,
                "rangeDurationField": rangeDurationField,
                "supported": supported,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durationField"]) -> 'DurationField': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leapDurationField"]) -> 'DurationField': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lenient"]) -> MetaOapg.properties.lenient: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximumValue"]) -> MetaOapg.properties.maximumValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumValue"]) -> MetaOapg.properties.minimumValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rangeDurationField"]) -> 'DurationField': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supported"]) -> MetaOapg.properties.supported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'DateTimeFieldType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["durationField", "leapDurationField", "lenient", "maximumValue", "minimumValue", "name", "rangeDurationField", "supported", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durationField"]) -> typing.Union['DurationField', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leapDurationField"]) -> typing.Union['DurationField', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lenient"]) -> typing.Union[MetaOapg.properties.lenient, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximumValue"]) -> typing.Union[MetaOapg.properties.maximumValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumValue"]) -> typing.Union[MetaOapg.properties.minimumValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rangeDurationField"]) -> typing.Union['DurationField', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supported"]) -> typing.Union[MetaOapg.properties.supported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['DateTimeFieldType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["durationField", "leapDurationField", "lenient", "maximumValue", "minimumValue", "name", "rangeDurationField", "supported", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        durationField: typing.Union['DurationField', schemas.Unset] = schemas.unset,
        leapDurationField: typing.Union['DurationField', schemas.Unset] = schemas.unset,
        lenient: typing.Union[MetaOapg.properties.lenient, bool, schemas.Unset] = schemas.unset,
        maximumValue: typing.Union[MetaOapg.properties.maximumValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimumValue: typing.Union[MetaOapg.properties.minimumValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        rangeDurationField: typing.Union['DurationField', schemas.Unset] = schemas.unset,
        supported: typing.Union[MetaOapg.properties.supported, bool, schemas.Unset] = schemas.unset,
        type: typing.Union['DateTimeFieldType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DateTimeField':
        return super().__new__(
            cls,
            *args,
            durationField=durationField,
            leapDurationField=leapDurationField,
            lenient=lenient,
            maximumValue=maximumValue,
            minimumValue=minimumValue,
            name=name,
            rangeDurationField=rangeDurationField,
            supported=supported,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from ticketmaster_python_sdk.model.date_time_field_type import DateTimeFieldType
from ticketmaster_python_sdk.model.duration_field import DurationField
