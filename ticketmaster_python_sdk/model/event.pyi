# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Created by: http://developer.ticketmaster.com/support/contact-us/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from ticketmaster_python_sdk import schemas  # noqa: F401


class Event(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Event
    """


    class MetaOapg:
        required = {
            "id",
            "type",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EVENT(cls):
                    return cls("event")
                
                @schemas.classproperty
                def VENUE(cls):
                    return cls("venue")
                
                @schemas.classproperty
                def ATTRACTION(cls):
                    return cls("attraction")
            info = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def accessibility() -> typing.Type['Accessibility']:
                return Accessibility
            additionalInfo = schemas.StrSchema
            
            
            class classifications(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Classification']:
                        return Classification
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Classification'], typing.List['Classification']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'classifications':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Classification':
                    return super().__getitem__(i)
        
            @staticmethod
            def dates() -> typing.Type['EventDates']:
                return EventDates
            distance = schemas.Float64Schema
        
            @staticmethod
            def externalLinks() -> typing.Type['EventExternalLinks']:
                return EventExternalLinks
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Image']:
                        return Image
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Image'], typing.List['Image']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Image':
                    return super().__getitem__(i)
            locale = schemas.StrSchema
        
            @staticmethod
            def location() -> typing.Type['Location']:
                return Location
            name = schemas.StrSchema
            
            
            class outlets(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Outlet']:
                        return Outlet
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Outlet'], typing.List['Outlet']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'outlets':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Outlet':
                    return super().__getitem__(i)
        
            @staticmethod
            def place() -> typing.Type['Place']:
                return Place
            pleaseNote = schemas.StrSchema
            
            
            class priceRanges(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PriceRange']:
                        return PriceRange
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PriceRange'], typing.List['PriceRange']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'priceRanges':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PriceRange':
                    return super().__getitem__(i)
            
            
            class products(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Product']:
                        return Product
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Product'], typing.List['Product']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'products':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Product':
                    return super().__getitem__(i)
        
            @staticmethod
            def promoter() -> typing.Type['Promoter']:
                return Promoter
            
            
            class promoters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Promoter']:
                        return Promoter
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Promoter'], typing.List['Promoter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'promoters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Promoter':
                    return super().__getitem__(i)
        
            @staticmethod
            def sales() -> typing.Type['EventSalesDates']:
                return EventSalesDates
        
            @staticmethod
            def seatmap() -> typing.Type['SeatMap']:
                return SeatMap
            test = schemas.BoolSchema
            units = schemas.StrSchema
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "type": type,
                "info": info,
                "description": description,
                "accessibility": accessibility,
                "additionalInfo": additionalInfo,
                "classifications": classifications,
                "dates": dates,
                "distance": distance,
                "externalLinks": externalLinks,
                "images": images,
                "locale": locale,
                "location": location,
                "name": name,
                "outlets": outlets,
                "place": place,
                "pleaseNote": pleaseNote,
                "priceRanges": priceRanges,
                "products": products,
                "promoter": promoter,
                "promoters": promoters,
                "sales": sales,
                "seatmap": seatmap,
                "test": test,
                "units": units,
                "url": url,
            }
    
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> MetaOapg.properties.info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessibility"]) -> 'Accessibility': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalInfo"]) -> MetaOapg.properties.additionalInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classifications"]) -> MetaOapg.properties.classifications: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dates"]) -> 'EventDates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalLinks"]) -> 'EventExternalLinks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'Location': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outlets"]) -> MetaOapg.properties.outlets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["place"]) -> 'Place': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pleaseNote"]) -> MetaOapg.properties.pleaseNote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceRanges"]) -> MetaOapg.properties.priceRanges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["products"]) -> MetaOapg.properties.products: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promoter"]) -> 'Promoter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promoters"]) -> MetaOapg.properties.promoters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sales"]) -> 'EventSalesDates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seatmap"]) -> 'SeatMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["test"]) -> MetaOapg.properties.test: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "info", "description", "accessibility", "additionalInfo", "classifications", "dates", "distance", "externalLinks", "images", "locale", "location", "name", "outlets", "place", "pleaseNote", "priceRanges", "products", "promoter", "promoters", "sales", "seatmap", "test", "units", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> typing.Union[MetaOapg.properties.info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessibility"]) -> typing.Union['Accessibility', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalInfo"]) -> typing.Union[MetaOapg.properties.additionalInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classifications"]) -> typing.Union[MetaOapg.properties.classifications, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dates"]) -> typing.Union['EventDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distance"]) -> typing.Union[MetaOapg.properties.distance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalLinks"]) -> typing.Union['EventExternalLinks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> typing.Union[MetaOapg.properties.locale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union['Location', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outlets"]) -> typing.Union[MetaOapg.properties.outlets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["place"]) -> typing.Union['Place', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pleaseNote"]) -> typing.Union[MetaOapg.properties.pleaseNote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceRanges"]) -> typing.Union[MetaOapg.properties.priceRanges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["products"]) -> typing.Union[MetaOapg.properties.products, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promoter"]) -> typing.Union['Promoter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promoters"]) -> typing.Union[MetaOapg.properties.promoters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sales"]) -> typing.Union['EventSalesDates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seatmap"]) -> typing.Union['SeatMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["test"]) -> typing.Union[MetaOapg.properties.test, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "info", "description", "accessibility", "additionalInfo", "classifications", "dates", "distance", "externalLinks", "images", "locale", "location", "name", "outlets", "place", "pleaseNote", "priceRanges", "products", "promoter", "promoters", "sales", "seatmap", "test", "units", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        info: typing.Union[MetaOapg.properties.info, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        accessibility: typing.Union['Accessibility', schemas.Unset] = schemas.unset,
        additionalInfo: typing.Union[MetaOapg.properties.additionalInfo, str, schemas.Unset] = schemas.unset,
        classifications: typing.Union[MetaOapg.properties.classifications, list, tuple, schemas.Unset] = schemas.unset,
        dates: typing.Union['EventDates', schemas.Unset] = schemas.unset,
        distance: typing.Union[MetaOapg.properties.distance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        externalLinks: typing.Union['EventExternalLinks', schemas.Unset] = schemas.unset,
        images: typing.Union[MetaOapg.properties.images, list, tuple, schemas.Unset] = schemas.unset,
        locale: typing.Union[MetaOapg.properties.locale, str, schemas.Unset] = schemas.unset,
        location: typing.Union['Location', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        outlets: typing.Union[MetaOapg.properties.outlets, list, tuple, schemas.Unset] = schemas.unset,
        place: typing.Union['Place', schemas.Unset] = schemas.unset,
        pleaseNote: typing.Union[MetaOapg.properties.pleaseNote, str, schemas.Unset] = schemas.unset,
        priceRanges: typing.Union[MetaOapg.properties.priceRanges, list, tuple, schemas.Unset] = schemas.unset,
        products: typing.Union[MetaOapg.properties.products, list, tuple, schemas.Unset] = schemas.unset,
        promoter: typing.Union['Promoter', schemas.Unset] = schemas.unset,
        promoters: typing.Union[MetaOapg.properties.promoters, list, tuple, schemas.Unset] = schemas.unset,
        sales: typing.Union['EventSalesDates', schemas.Unset] = schemas.unset,
        seatmap: typing.Union['SeatMap', schemas.Unset] = schemas.unset,
        test: typing.Union[MetaOapg.properties.test, bool, schemas.Unset] = schemas.unset,
        units: typing.Union[MetaOapg.properties.units, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            id=id,
            type=type,
            info=info,
            description=description,
            accessibility=accessibility,
            additionalInfo=additionalInfo,
            classifications=classifications,
            dates=dates,
            distance=distance,
            externalLinks=externalLinks,
            images=images,
            locale=locale,
            location=location,
            name=name,
            outlets=outlets,
            place=place,
            pleaseNote=pleaseNote,
            priceRanges=priceRanges,
            products=products,
            promoter=promoter,
            promoters=promoters,
            sales=sales,
            seatmap=seatmap,
            test=test,
            units=units,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )

from ticketmaster_python_sdk.model.accessibility import Accessibility
from ticketmaster_python_sdk.model.classification import Classification
from ticketmaster_python_sdk.model.event_dates import EventDates
from ticketmaster_python_sdk.model.event_external_links import EventExternalLinks
from ticketmaster_python_sdk.model.event_sales_dates import EventSalesDates
from ticketmaster_python_sdk.model.image import Image
from ticketmaster_python_sdk.model.location import Location
from ticketmaster_python_sdk.model.outlet import Outlet
from ticketmaster_python_sdk.model.place import Place
from ticketmaster_python_sdk.model.price_range import PriceRange
from ticketmaster_python_sdk.model.product import Product
from ticketmaster_python_sdk.model.promoter import Promoter
from ticketmaster_python_sdk.model.seat_map import SeatMap
